<?php	require_once ("../lib/common/dao/DAO.class.php");	require_once ("../lib/common/Manager.class.php");	require_once ("Domain.class.php");	/*	 * Manager class of DOMAIN table	 */	class DomainManager extends Manager {		/**		 * get a Domain instance by primary key		 * @param <string> $domainid		 * @return <Domain> $vo		 */		public function getDomainByID($domainid){			$conn = $this->getConnection();			$dao = new DAO();			$vo = new Domain();			$vo->setDomainid($domainid);			$vo = $dao->queryByPK($vo);			$this->closeConnection($conn);			return $vo;		}		/**		 * get a Domain instance by primary key		 * primary key value in $vo (value object) must not be null		 * @param <Domain> $vo		 * @return <Domain> $vo		 */		public function getDomain($vo){			$conn = $this->getConnection();			$dao = new DAO();			$vo = $dao->queryByPK($vo);			$this->closeConnection($conn);			return $vo;		}		/**		 * get an array of domainid=>Domain map		 * @param <Domain> $vo		 * @return Array<key<string>=>value<Domain>> $voMap		 */		public function getDomainMap($vo){			$conn = $this->getConnection();			$voMap = array();			$dao = new DAO();			$vos = $dao->query($vo);			for($i=0; $i<count($vos); $i++){				$curr_vo = $vos[$i];				$voMap[$curr_vo->getDomainid()] = $curr_vo;			}			$this->closeConnection($conn);			return $voMap;		}		/**		 * get an array of Domain instances		 * query condition is stored in value object		 * @param <Domain> $vo		 * @param <string> $orderby		 * @return Array<Domain>		 */		public function getDomains($vo, $orderby){			$conn = $this->getConnection();			$dao = new DAO();			$vos = $dao->query($vo, $orderby);			$this->closeConnection($conn);			return $vos;		}		/**		 * get an array of Domain instances by where clause		 * @param <Domain> $vo		 * @param <string> $orderby		 * @param <string> $where		 * @return Array<Domain>		 */		public function getDomainsByWhere($vo, $where, $orderby){			$conn = $this->getConnection();			$dao = new DAO();			$vos = $dao->queryByWhere($vo, $where, $orderby);			$this->closeConnection($conn);			return $vos;		}		/**		 * get an array of Domain instances by SQL		 * @param <Domain> $vo		 * @param <string> $sql		 * @return Array<Domain>		 */		public function getDomainsBySQL($vo, $sql){			$conn = $this->getConnection();			$dao = new DAO();			$vos = $dao->queryBySQL($vo, $sql);			$this->closeConnection($conn);			return $vos;		}		/**		 * add a Domain record to database		 * @param <Domain> $vo		 * @return <Domain> $vo - a Domain instance with primary key value		 */		public function addDomain($vo){			$conn = $this->getConnection();			$dao = new DAO();			$vo = $dao->insert($vo);			$this->closeConnection($conn);			return $vo;		}		/**		 * update a Domain record in database		 * primary key value in $vo (value object) must not be null		 * @param <Domain> $vo		 * @return <int> affected row number (0 or 1)		 */		public function updateDomain($vo){			$conn = $this->getConnection();			$dao = new DAO();			$num = $dao->update($vo);			$this->closeConnection($conn);			return $num;		}		/**		 * update a batch of Domain records in database		 * @param <string> $sql		 * @return <int> affected row number		 */		public function updateDomainBySQL($sql){			$conn = $this->getConnection();			$dao = new DAO();			$num = $dao->updateBySQL($sql);			$this->closeConnection($conn);			return $num;		}		/**		 * delete a Domain record in database		 * primary key value in $vo (value object) must not be null		 * @param <Domain> $vo		 * @return <int> affected row number (0 or 1)		 */		public function deleteDomain($vo){			$conn = $this->getConnection();			$dao = new DAO();			$num = $dao->delete($vo);			$this->closeConnection($conn);			return $num;		}		/**		 * delete a batch of Domain records in database		 * @param <Domain> $vo		 * @return <int> affected row number		 */		public function deleteDomains($vo){			$conn = $this->getConnection();			$dao = new DAO();			$num = $dao->batchDelete($vo);			$this->closeConnection($conn);			return $num;		}		/**		 * delete a batch of Domain records in database		 * @param <string> $sql		 * @return <int> affected row number		 */		public function deleteDomains($sql){			$conn = $this->getConnection();			$dao = new DAO();			$num = $dao->deleteBySQL($sql);			$this->closeConnection($conn);			return $num;		}	}?>