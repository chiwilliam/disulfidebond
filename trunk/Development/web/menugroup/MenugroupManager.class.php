<?php	require_once ("../lib/common/dao/DAO.class.php");	require_once ("../lib/common/Manager.class.php");	require_once ("./Menugroup.class.php");	/*	 * Manager class of MENUGROUP table	 */	class MenugroupManager extends Manager {		/**		 * get a Menugroup instance by primary key		 * @param <string> $menugroupid		 * @return <Menugroup> $vo		 */		public function getMenugroupByID($menugroupid){			$conn = $this->getConnection();			$dao = new DAO();			$vo = new Menugroup();			$vo->setMenugroupid($menugroupid);			$vo = $dao->queryByPK($vo);			$this->closeConnection($conn);			return $vo;		}		/**		 * get a Menugroup instance by primary key		 * primary key value in $vo (value object) must not be null		 * @param <Menugroup> $vo		 * @return <Menugroup> $vo		 */		public function getMenugroup($vo){			$conn = $this->getConnection();			$dao = new DAO();			$vo = $dao->queryByPK($vo);			$this->closeConnection($conn);			return $vo;		}		/**		 * get an array of menugroupid=>Menugroup map		 * @param <Menugroup> $vo		 * @return Array<key<string>=>value<Menugroup>> $voMap		 */		public function getMenugroupMap($vo){			$conn = $this->getConnection();			$voMap = array();			$dao = new DAO();			$vos = $dao->query($vo);			for($i=0; $i<count($vos); $i++){				$curr_vo = $vos[$i];				$voMap[$curr_vo->getMenugroupid()] = $curr_vo;			}			$this->closeConnection($conn);			return $voMap;		}		/**		 * get an array of Menugroup instances		 * query condition is stored in value object		 * @param <Menugroup> $vo		 * @param <string> $orderby		 * @return Array<Menugroup>		 */		public function getMenugroups($vo, $orderby){			$conn = $this->getConnection();			$dao = new DAO();			$vos = $dao->query($vo, $orderby);			$this->closeConnection($conn);			return $vos;		}		/**		 * get an array of Menugroup instances by where clause		 * @param <Menugroup> $vo		 * @param <string> $orderby		 * @param <string> $where		 * @return Array<Menugroup>		 */		public function getMenugroupsByWhere($vo, $where, $orderby){			$conn = $this->getConnection();			$dao = new DAO();			$vos = $dao->queryByWhere($vo, $where, $orderby);			$this->closeConnection($conn);			return $vos;		}		/**		 * get an array of Menugroup instances by SQL		 * @param <Menugroup> $vo		 * @param <string> $sql		 * @return Array<Menugroup>		 */		public function getMenugroupsBySQL($vo, $sql){			$conn = $this->getConnection();			$dao = new DAO();			$vos = $dao->queryBySQL($vo, $sql);			$this->closeConnection($conn);			return $vos;		}		/**		 * add a Menugroup record to database		 * @param <Menugroup> $vo		 * @return <Menugroup> $vo - a Menugroup instance with primary key value		 */		public function addMenugroup($vo){			$conn = $this->getConnection();			$dao = new DAO();			$vo = $dao->insert($vo);			$this->closeConnection($conn);			return $vo;		}		/**		 * update a Menugroup record in database		 * primary key value in $vo (value object) must not be null		 * @param <Menugroup> $vo		 * @return <int> affected row number (0 or 1)		 */		public function updateMenugroup($vo){			$conn = $this->getConnection();			$dao = new DAO();			$num = $dao->update($vo);			$this->closeConnection($conn);			return $num;		}		/**		 * update a batch of Menugroup records in database		 * @param <string> $sql		 * @return <int> affected row number		 */		public function updateMenugroupBySQL($sql){			$conn = $this->getConnection();			$dao = new DAO();			$num = $dao->updateBySQL($sql);			$this->closeConnection($conn);			return $num;		}		/**		 * delete a Menugroup record in database		 * primary key value in $vo (value object) must not be null		 * @param <Menugroup> $vo		 * @return <int> affected row number (0 or 1)		 */		public function deleteMenugroup($vo){			$conn = $this->getConnection();			$dao = new DAO();			$num = $dao->delete($vo);			$this->closeConnection($conn);			return $num;		}		/**		 * delete a batch of Menugroup records in database		 * @param <Menugroup> $vo		 * @return <int> affected row number		 */		public function deleteMenugroups($vo){			$conn = $this->getConnection();			$dao = new DAO();			$num = $dao->batchDelete($vo);			$this->closeConnection($conn);			return $num;		}		/**		 * delete a batch of Menugroup records in database		 * @param <string> $sql		 * @return <int> affected row number		 */		public function deleteMenugroups($sql){			$conn = $this->getConnection();			$dao = new DAO();			$num = $dao->deleteBySQL($sql);			$this->closeConnection($conn);			return $num;		}	}?>