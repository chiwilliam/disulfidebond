<?php	require_once ("\../lib\\common\\dao\\DAO.class.php");	require_once ("\../lib\\common\\Manager.class.php");	require_once ("\\.\\Menu.class.php");	/*	 * Manager class of MENU table	 */	class MenuManager extends Manager {		//hold a single instance of the manager class		protected static $manager;		/**		 * singleton pattern method		 * get the single instance of the manager class		 * @return <OrganizationManager>		 */		public static function getInstance(){			if (!isset(self::$manager)) {				$c = __CLASS__;				self::$manager = new $c;			}			return self::$manager;		}		/**		 * get a Menu instance by primary key		 * @param <int> $menuid		 * @return <Menu> $vo		 */		public function getMenuByID($menuid){			$conn = $this->getConnection();			$dao = new DAO();			$vo = new Menu();			$vo->setMenuid($menuid);			$vo = $dao->queryByPK($vo);			$this->closeConnection($conn);			return $vo;		}		/**		 * get a Menu instance by primary key		 * primary key value in $vo (value object) must not be null		 * @param <Menu> $vo		 * @return <Menu> $vo		 */		public function getMenu($vo){			$conn = $this->getConnection();			$dao = new DAO();			$vo = $dao->queryByPK($vo);			$this->closeConnection($conn);			return $vo;		}		/**		 * get an array of menuid=>Menu map		 * @param <Menu> $vo		 * @return Array<key<int>=>value<Menu>> $voMap		 */		public function getMenuMap($vo){			$conn = $this->getConnection();			$voMap = array();			$dao = new DAO();			$vos = $dao->query($vo);			for($i=0; $i<count($vos); $i++){				$curr_vo = $vos[$i];				$voMap[$curr_vo->getMenuid()] = $curr_vo;			}			$this->closeConnection($conn);			return $voMap;		}		/**		 * get an array of Menu instances		 * query condition is stored in value object		 * @param <Menu> $vo		 * @param <string> $orderby		 * @return Array<Menu>		 */		public function getMenus($vo, $orderby){			$conn = $this->getConnection();			$dao = new DAO();			$vos = $dao->query($vo, $orderby);			$this->closeConnection($conn);			return $vos;		}		/**		 * get an array of Menu instances by where clause		 * @param <Menu> $vo		 * @param <string> $orderby		 * @param <string> $where		 * @return Array<Menu>		 */		public function getMenusByWhere($vo, $where, $orderby){			$conn = $this->getConnection();			$dao = new DAO();			$vos = $dao->queryByWhere($vo, $where, $orderby);			$this->closeConnection($conn);			return $vos;		}		/**		 * get an array of Menu instances by SQL		 * @param <Menu> $vo		 * @param <string> $sql		 * @return Array<Menu>		 */		public function getMenusBySQL($vo, $sql){			$conn = $this->getConnection();			$dao = new DAO();			$vos = $dao->queryBySQL($vo, $sql);			$this->closeConnection($conn);			return $vos;		}		/**		 * add a Menu record to database		 * @param <Menu> $vo		 * @return <Menu> $vo - a Menu instance with primary key value		 */		public function addMenu($vo){			$conn = $this->getConnection();			$dao = new DAO();			$vo = $dao->insert($vo);			$this->closeConnection($conn);			return $vo;		}		/**		 * update a Menu record in database		 * primary key value in $vo (value object) must not be null		 * @param <Menu> $vo		 * @return <int> affected row number (0 or 1)		 */		public function updateMenu($vo){			$conn = $this->getConnection();			$dao = new DAO();			$num = $dao->update($vo);			$this->closeConnection($conn);			return $num;		}		/**		 * update a batch of Menu records in database		 * @param <string> $sql		 * @return <int> affected row number		 */		public function updateMenuBySQL($sql){			$conn = $this->getConnection();			$dao = new DAO();			$num = $dao->updateBySQL($sql);			$this->closeConnection($conn);			return $num;		}		/**		 * delete a Menu record in database		 * primary key value in $vo (value object) must not be null		 * @param <Menu> $vo		 * @return <int> affected row number (0 or 1)		 */		public function deleteMenu($vo){			$conn = $this->getConnection();			$dao = new DAO();			$num = $dao->delete($vo);			$this->closeConnection($conn);			return $num;		}		/**		 * delete a batch of Menu records in database		 * @param <Menu> $vo		 * @return <int> affected row number		 */		public function deleteMenus($vo){			$conn = $this->getConnection();			$dao = new DAO();			$num = $dao->batchDelete($vo);			$this->closeConnection($conn);			return $num;		}		/**		 * delete a batch of Menu records in database		 * @param <string> $sql		 * @return <int> affected row number		 */		public function deleteMenusBySQL($sql){			$conn = $this->getConnection();			$dao = new DAO();			$num = $dao->deleteBySQL($sql);			$this->closeConnection($conn);			return $num;		}	}?>