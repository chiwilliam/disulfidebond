<?php	require_once ("../lib/common/dao/DAO.class.php");	require_once ("../lib/common/Manager.class.php");	require_once ("Item.class.php");	/*	 * Manager class of ITEM table	 */	class ItemManager extends Manager {		//hold a single instance of the manager class		protected static $manager;		/**		 * singleton pattern method		 * get the single instance of the manager class		 * @return <OrganizationManager>		 */		public static function getInstance(){			if (!isset(self::$manager)) {				$c = __CLASS__;				self::$manager = new $c;			}			return self::$manager;		}		/**		 * get a Item instance by primary key		 * @param <int> $itemid		 * @return <Item> $vo		 */		public function getItemByID($itemid){			$conn = $this->getConnection();			$dao = new DAO();			$vo = new Item();			$vo->setItemid($itemid);			$vo = $dao->queryByPK($vo);			$this->closeConnection($conn);			return $vo;		}		/**		 * get a Item instance by primary key		 * primary key value in $vo (value object) must not be null		 * @param <Item> $vo		 * @return <Item> $vo		 */		public function getItem($vo){			$conn = $this->getConnection();			$dao = new DAO();			$vo = $dao->queryByPK($vo);			$this->closeConnection($conn);			return $vo;		}		/**		 * get an array of itemid=>Item map		 * @param <Item> $vo		 * @return Array<key<int>=>value<Item>> $voMap		 */		public function getItemMap($vo){			$conn = $this->getConnection();			$voMap = array();			$dao = new DAO();			$vos = $dao->query($vo);			for($i=0; $i<count($vos); $i++){				$curr_vo = $vos[$i];				$voMap[$curr_vo->getItemid()] = $curr_vo;			}			$this->closeConnection($conn);			return $voMap;		}		/**		 * get an array of Item instances		 * query condition is stored in value object		 * @param <Item> $vo		 * @param <string> $orderby		 * @return Array<Item>		 */		public function getItems($vo, $orderby){			$conn = $this->getConnection();			$dao = new DAO();			$vos = $dao->query($vo, $orderby);			$this->closeConnection($conn);			return $vos;		}		/**		 * get an array of Item instances by where clause		 * @param <Item> $vo		 * @param <string> $orderby		 * @param <string> $where		 * @return Array<Item>		 */		public function getItemsByWhere($vo, $where, $orderby){			$conn = $this->getConnection();			$dao = new DAO();			$vos = $dao->queryByWhere($vo, $where, $orderby);			$this->closeConnection($conn);			return $vos;		}		/**		 * get an array of Item instances by SQL		 * @param <Item> $vo		 * @param <string> $sql		 * @return Array<Item>		 */		public function getItemsBySQL($vo, $sql){			$conn = $this->getConnection();			$dao = new DAO();			$vos = $dao->queryBySQL($vo, $sql);			$this->closeConnection($conn);			return $vos;		}		/**		 * add a Item record to database		 * @param <Item> $vo		 * @return <Item> $vo - a Item instance with primary key value		 */		public function addItem($vo){			$conn = $this->getConnection();			$dao = new DAO();			$vo = $dao->insert($vo);			$this->closeConnection($conn);			return $vo;		}		/**		 * update a Item record in database		 * primary key value in $vo (value object) must not be null		 * @param <Item> $vo		 * @return <int> affected row number (0 or 1)		 */		public function updateItem($vo){			$conn = $this->getConnection();			$dao = new DAO();			$num = $dao->update($vo);			$this->closeConnection($conn);			return $num;		}		/**		 * update a batch of Item records in database		 * @param <string> $sql		 * @return <int> affected row number		 */		public function updateItemBySQL($sql){			$conn = $this->getConnection();			$dao = new DAO();			$num = $dao->updateBySQL($sql);			$this->closeConnection($conn);			return $num;		}		/**		 * delete a Item record in database		 * primary key value in $vo (value object) must not be null		 * @param <Item> $vo		 * @return <int> affected row number (0 or 1)		 */		public function deleteItem($vo){			$conn = $this->getConnection();			$dao = new DAO();			$num = $dao->delete($vo);			$this->closeConnection($conn);			return $num;		}		/**		 * delete a batch of Item records in database		 * @param <Item> $vo		 * @return <int> affected row number		 */		public function deleteItems($vo){			$conn = $this->getConnection();			$dao = new DAO();			$num = $dao->batchDelete($vo);			$this->closeConnection($conn);			return $num;		}		/**		 * delete a batch of Item records in database		 * @param <string> $sql		 * @return <int> affected row number		 */		public function deleteItemsBySQL($sql){			$conn = $this->getConnection();			$dao = new DAO();			$num = $dao->deleteBySQL($sql);			$this->closeConnection($conn);			return $num;		}	}?>