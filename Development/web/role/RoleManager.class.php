<?php	require_once ("\../lib\\common\\dao\\DAO.class.php");	require_once ("\../lib\\common\\Manager.class.php");	require_once ("\\.\\Role.class.php");	/*	 * Manager class of ROLE table	 */	class RoleManager extends Manager {		//hold a single instance of the manager class		protected static $manager;		/**		 * singleton pattern method		 * get the single instance of the manager class		 * @return <OrganizationManager>		 */		public static function getInstance(){			if (!isset(self::$manager)) {				$c = __CLASS__;				self::$manager = new $c;			}			return self::$manager;		}		/**		 * get a Role instance by primary key		 * @param <int> $roleid		 * @return <Role> $vo		 */		public function getRoleByID($roleid){			$conn = $this->getConnection();			$dao = new DAO();			$vo = new Role();			$vo->setRoleid($roleid);			$vo = $dao->queryByPK($vo);			$this->closeConnection($conn);			return $vo;		}		/**		 * get a Role instance by primary key		 * primary key value in $vo (value object) must not be null		 * @param <Role> $vo		 * @return <Role> $vo		 */		public function getRole($vo){			$conn = $this->getConnection();			$dao = new DAO();			$vo = $dao->queryByPK($vo);			$this->closeConnection($conn);			return $vo;		}		/**		 * get an array of roleid=>Role map		 * @param <Role> $vo		 * @return Array<key<int>=>value<Role>> $voMap		 */		public function getRoleMap($vo){			$conn = $this->getConnection();			$voMap = array();			$dao = new DAO();			$vos = $dao->query($vo);			for($i=0; $i<count($vos); $i++){				$curr_vo = $vos[$i];				$voMap[$curr_vo->getRoleid()] = $curr_vo;			}			$this->closeConnection($conn);			return $voMap;		}		/**		 * get an array of Role instances		 * query condition is stored in value object		 * @param <Role> $vo		 * @param <string> $orderby		 * @return Array<Role>		 */		public function getRoles($vo, $orderby){			$conn = $this->getConnection();			$dao = new DAO();			$vos = $dao->query($vo, $orderby);			$this->closeConnection($conn);			return $vos;		}		/**		 * get an array of Role instances by where clause		 * @param <Role> $vo		 * @param <string> $orderby		 * @param <string> $where		 * @return Array<Role>		 */		public function getRolesByWhere($vo, $where, $orderby){			$conn = $this->getConnection();			$dao = new DAO();			$vos = $dao->queryByWhere($vo, $where, $orderby);			$this->closeConnection($conn);			return $vos;		}		/**		 * get an array of Role instances by SQL		 * @param <Role> $vo		 * @param <string> $sql		 * @return Array<Role>		 */		public function getRolesBySQL($vo, $sql){			$conn = $this->getConnection();			$dao = new DAO();			$vos = $dao->queryBySQL($vo, $sql);			$this->closeConnection($conn);			return $vos;		}		/**		 * add a Role record to database		 * @param <Role> $vo		 * @return <Role> $vo - a Role instance with primary key value		 */		public function addRole($vo){			$conn = $this->getConnection();			$dao = new DAO();			$vo = $dao->insert($vo);			$this->closeConnection($conn);			return $vo;		}		/**		 * update a Role record in database		 * primary key value in $vo (value object) must not be null		 * @param <Role> $vo		 * @return <int> affected row number (0 or 1)		 */		public function updateRole($vo){			$conn = $this->getConnection();			$dao = new DAO();			$num = $dao->update($vo);			$this->closeConnection($conn);			return $num;		}		/**		 * update a batch of Role records in database		 * @param <string> $sql		 * @return <int> affected row number		 */		public function updateRoleBySQL($sql){			$conn = $this->getConnection();			$dao = new DAO();			$num = $dao->updateBySQL($sql);			$this->closeConnection($conn);			return $num;		}		/**		 * delete a Role record in database		 * primary key value in $vo (value object) must not be null		 * @param <Role> $vo		 * @return <int> affected row number (0 or 1)		 */		public function deleteRole($vo){			$conn = $this->getConnection();			$dao = new DAO();			$num = $dao->delete($vo);			$this->closeConnection($conn);			return $num;		}		/**		 * delete a batch of Role records in database		 * @param <Role> $vo		 * @return <int> affected row number		 */		public function deleteRoles($vo){			$conn = $this->getConnection();			$dao = new DAO();			$num = $dao->batchDelete($vo);			$this->closeConnection($conn);			return $num;		}		/**		 * delete a batch of Role records in database		 * @param <string> $sql		 * @return <int> affected row number		 */		public function deleteRolesBySQL($sql){			$conn = $this->getConnection();			$dao = new DAO();			$num = $dao->deleteBySQL($sql);			$this->closeConnection($conn);			return $num;		}	}?>