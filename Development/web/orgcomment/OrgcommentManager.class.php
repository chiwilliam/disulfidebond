<?php        require_once (dirname(__FILE__)."/../lib/common/dao/SearchDAO.class.php");	require_once (dirname(__FILE__)."/../lib/common/dao/DAO.class.php");	require_once (dirname(__FILE__)."/../lib/common/Manager.class.php");	require_once (dirname(__FILE__)."/./Orgcomment.class.php");	/*	 * Manager class of ORGCOMMENT table	 */	class OrgcommentManager extends Manager {		//hold a single instance of the manager class		protected static $manager;		/**		 * singleton pattern method		 * get the single instance of the manager class		 * @return <OrganizationManager>		 */		public static function getInstance(){			if (!isset(self::$manager)) {				$c = __CLASS__;				self::$manager = new $c;			}			return self::$manager;		}		/**		 * get a Orgcomment instance by primary key		 * @param <int> $orgcommentid		 * @return <Orgcomment> $vo		 */		public function getOrgcommentByID($orgcommentid){			$conn = $this->getConnection();			$dao = new DAO();			$vo = new Orgcomment();			$vo->setOrgcommentid($orgcommentid);			$vo = $dao->queryByPK($vo);			$this->closeConnection($conn);			return $vo;		}		/**		 * get a Orgcomment instance by primary key		 * primary key value in $vo (value object) must not be null		 * @param <Orgcomment> $vo		 * @return <Orgcomment> $vo		 */		public function getOrgcomment($vo){			$conn = $this->getConnection();			$dao = new DAO();			$vo = $dao->queryByPK($vo);			$this->closeConnection($conn);			return $vo;		}		/**		 * get an array of orgcommentid=>Orgcomment map		 * @param <Orgcomment> $vo		 * @return Array<key<int>=>value<Orgcomment>> $voMap		 */		public function getOrgcommentMap($vo){			$conn = $this->getConnection();			$voMap = array();			$dao = new DAO();			$vos = $dao->query($vo);			for($i=0; $i<count($vos); $i++){				$curr_vo = $vos[$i];				$voMap[$curr_vo->getOrgcommentid()] = $curr_vo;			}			$this->closeConnection($conn);			return $voMap;		}		/**		 * get an array of Orgcomment instances		 * query condition is stored in value object		 * @param <Orgcomment> $vo		 * @param <string> $orderby		 * @return Array<Orgcomment>		 */		public function getOrgcomments($vo, $orderby){			$conn = $this->getConnection();			$dao = new DAO();			$vos = $dao->query($vo, $orderby);			$this->closeConnection($conn);			return $vos;		}		/**		 * get an array of Orgcomment instances by where clause		 * @param <Orgcomment> $vo		 * @param <string> $orderby		 * @param <string> $where		 * @return Array<Orgcomment>		 */		public function getOrgcommentsByWhere($vo, $where, $orderby){			$conn = $this->getConnection();			$dao = new DAO();			$vos = $dao->queryByWhere($vo, $where, $orderby);			$this->closeConnection($conn);			return $vos;		}		/**		 * get an array of Orgcomment instances by SQL		 * @param <Orgcomment> $vo		 * @param <string> $sql		 * @return Array<Orgcomment>		 */		public function getOrgcommentsBySQL($vo, $sql){			$conn = $this->getConnection();			$dao = new DAO();			$vos = $dao->queryBySQL($vo, $sql);			$this->closeConnection($conn);			return $vos;		}		/**		 * add a Orgcomment record to database		 * @param <Orgcomment> $vo		 * @return <Orgcomment> $vo - a Orgcomment instance with primary key value		 */		public function addOrgcomment($vo){			$conn = $this->getConnection();			$dao = new DAO();			$vo = $dao->insert($vo);			$this->closeConnection($conn);			return $vo;		}		/**		 * update a Orgcomment record in database		 * primary key value in $vo (value object) must not be null		 * @param <Orgcomment> $vo		 * @return <int> affected row number (0 or 1)		 */		public function updateOrgcomment($vo){			$conn = $this->getConnection();			$dao = new DAO();			$num = $dao->update($vo);			$this->closeConnection($conn);			return $num;		}		/**		 * update a batch of Orgcomment records in database		 * @param <string> $sql		 * @return <int> affected row number		 */		public function updateOrgcommentBySQL($sql){			$conn = $this->getConnection();			$dao = new DAO();			$num = $dao->updateBySQL($sql);			$this->closeConnection($conn);			return $num;		}		/**		 * delete a Orgcomment record in database		 * primary key value in $vo (value object) must not be null		 * @param <Orgcomment> $vo		 * @return <int> affected row number (0 or 1)		 */		public function deleteOrgcomment($vo){			$conn = $this->getConnection();			$dao = new DAO();			$num = $dao->delete($vo);			$this->closeConnection($conn);			return $num;		}		/**		 * delete a batch of Orgcomment records in database		 * @param <Orgcomment> $vo		 * @return <int> affected row number		 */		public function deleteOrgcomments($vo){			$conn = $this->getConnection();			$dao = new DAO();			$num = $dao->batchDelete($vo);			$this->closeConnection($conn);			return $num;		}		/**		 * delete a batch of Orgcomment records in database		 * @param <string> $sql		 * @return <int> affected row number		 */		public function deleteOrgcommentsBySQL($sql){			$conn = $this->getConnection();			$dao = new DAO();			$num = $dao->deleteBySQL($sql);			$this->closeConnection($conn);			return $num;		}	}?>