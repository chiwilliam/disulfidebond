<?php	require_once ("../lib/common/dao/DAO.class.php");	require_once ("../lib/common/Manager.class.php");	require_once ("\\.\\Groupstat.class.php");	/*	 * Manager class of GROUPSTAT table	 */	class GroupstatManager extends Manager {		//hold a single instance of the manager class		protected static $manager;		/**		 * singleton pattern method		 * get the single instance of the manager class		 * @return <OrganizationManager>		 */		public static function getInstance(){			if (!isset(self::$manager)) {				$c = __CLASS__;				self::$manager = new $c;			}			return self::$manager;		}		/**		 * get an array of Groupstat instances		 * query condition is stored in value object		 * @param <Groupstat> $vo		 * @param <string> $orderby		 * @return Array<Groupstat>		 */		public function getGroupstats($vo, $orderby){			$conn = $this->getConnection();			$dao = new DAO();			$vos = $dao->query($vo, $orderby);			$this->closeConnection($conn);			return $vos;		}		/**		 * get an array of Groupstat instances by where clause		 * @param <Groupstat> $vo		 * @param <string> $orderby		 * @param <string> $where		 * @return Array<Groupstat>		 */		public function getGroupstatsByWhere($vo, $where, $orderby){			$conn = $this->getConnection();			$dao = new DAO();			$vos = $dao->queryByWhere($vo, $where, $orderby);			$this->closeConnection($conn);			return $vos;		}		/**		 * get an array of Groupstat instances by SQL		 * @param <Groupstat> $vo		 * @param <string> $sql		 * @return Array<Groupstat>		 */		public function getGroupstatsBySQL($vo, $sql){			$conn = $this->getConnection();			$dao = new DAO();			$vos = $dao->queryBySQL($vo, $sql);			$this->closeConnection($conn);			return $vos;		}		/**		 * add a Groupstat record to database		 * @param <Groupstat> $vo		 * @return <Groupstat> $vo		 */		public function addGroupstat($vo){			$conn = $this->getConnection();			$dao = new DAO();			$vo = $dao->insert($vo);			$this->closeConnection($conn);			return $vo;		}		/**		 * update a batch of Groupstat records in database		 * @param <string> $sql		 * @return <int> affected row number		 */		public function updateGroupstatBySQL($sql){			$conn = $this->getConnection();			$dao = new DAO();			$num = $dao->updateBySQL($sql);			$this->closeConnection($conn);			return $num;		}		/**		 * delete a batch of Groupstat records in database		 * @param <Groupstat> $vo		 * @return <int> affected row number		 */		public function deleteGroupstats($vo){			$conn = $this->getConnection();			$dao = new DAO();			$num = $dao->batchDelete($vo);			$this->closeConnection($conn);			return $num;		}		/**		 * delete a batch of Groupstat records in database		 * @param <string> $sql		 * @return <int> affected row number		 */		public function deleteGroupstatsBySQL($sql){			$conn = $this->getConnection();			$dao = new DAO();			$num = $dao->deleteBySQL($sql);			$this->closeConnection($conn);			return $num;		}	}?>